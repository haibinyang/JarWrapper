#!/bin/bash

echo hostname=$HOSTNAME

source ~/.bash_profile

jar_wrapper_ops=${1}

pom_groupid=${2}
pom_artifactid=${3}
pom_version=${4}
pom_displayname=${5}

job_name=$6
build_number=$7
build_id=$8
build_url=$9
git_url=${10}
git_branch=${11}
git_commit=${12}
artifact_url=${13}
extra_options=${14}

serviceName=${pom_groupid}-${pom_artifactid}

echo job_name=$job_name
echo build_number=$build_number
echo build_id=$build_id
echo build_url=$build_url
echo git_url=$git_url
echo git_branch=$git_branch
echo git_commit=$git_commit
echo artifact_url=$artifact_url
echo pom_displayname=$pom_displayname
echo pom_version=$pom_version
echo pom_groupid=$pom_groupid
echo pom_artifactid=$pom_artifactid
echo jar_wrapper_ops=$jar_wrapper_ops
echo extra_options=$extra_options
echo serviceName=$serviceName

if [ -z $jar_wrapper_ops ]; then
  echo "jar_wrapper_ops is unset";
  exit 1
fi

if [ -z $pom_groupid ]; then
  echo "pom_groupid is unset";
  exit 1
fi

if [ -z $pom_artifactid ]; then
  echo "pom_artifactid is unset";
  exit 1
fi

# 主目录
# RDECK_BASE must be set and exist
[ -z "$DEPLOY_BASE_DIR" -o ! -d "$DEPLOY_BASE_DIR" ] && {
    echo "DEPLOY_BASE_DIR not set or does not exist" ;
    exit 1 ;
}


# 二级目录：upload和instance
UPLOAD_DIR="$DEPLOY_BASE_DIR/upload"
INSTANCE_DIR="$DEPLOY_BASE_DIR/instance"
echo DEPLOY_BASE_DIR=$DEPLOY_BASE_DIR
echo UPLOAD_DIR=$UPLOAD_DIR

#此次上传的JAR包的具体路径
jarFullPath=${UPLOAD_DIR}/${artifact_url}
echo jarFullPath=$jarFullPath

#baseDir/instance/serviceName的一级目录
serviceBasePath=${INSTANCE_DIR}/${pom_groupid}/${pom_artifactid}
echo serviceBasePath=$serviceBasePath
# 创建serviceName下的子目录
LOGS_DIR=logs
JAR_DIR=${serviceBasePath}/jar
LOG_DIR=${serviceBasePath}/${LOGS_DIR}
echo JAR_DIR=$JAR_DIR
echo LOG_DIR=$LOG_DIR

# 所有操作都要使用到pid, lock文件
PID_FILE=$serviceBasePath/pid
LOK_FILE=$serviceBasePath/lock
HEAD=${serviceBasePath}/HEAD
echo "PID_FILE: $PID_FILE"
echo "LOK_FILE: $LOK_FILE"
echo "HEAD: $HEAD"

# 其它
RETVAL=0
DATE=`/bin/date +%Y%m%d-%H%M%S`
echo DATE=$DATE

echo_success() {
    echo "[OK]"
    return 0
}

echo_failure() {
    echo "[FAILED]"
    return 1
}

checkDirWritable() {
    echo "checkDirWritable"

    # 检查主目录是否可写
    [ -w $DEPLOY_BASE_DIR ] || {
        echo "DEPLOY_BASE_DIR dir not writable: $DEPLOY_BASE_DIR"
        return 1;
    }
    # 检查UPLOAD_DIR目录是否可写
    [ -w $UPLOAD_DIR ] || {
        echo "UPLOAD_DIR dir not writable: $UPLOAD_DIR"
        return 1;
    }
    # 检查INSTANCE_DIR目录是否可写
    [ -w $INSTANCE_DIR ] || {
        echo "INSTANCE_DIR dir not writable: $INSTANCE_DIR"
        return 1;
    }
    # 检查serviceBasePath目录是否可写
    [ -w $serviceBasePath ] || {
        echo "serviceBasePath dir not writable: $serviceBasePath"
        return 1;
    }
    # 检查JAR_DIR目录是否可写
    [ -w $JAR_DIR ] || {
        echo "JAR_DIR dir not writable: $JAR_DIR"
        return 1;
    }
    # 检查LOG_DIR目录是否可写
    [ -w $LOG_DIR ] || {
        echo "LOG_DIR dir not writable: $LOG_DIR"
        return 1;
    }

    return 0
}


init() {
    echo "initing $serviceName"

    # 创建文件夹
    echo "Creating dir..."
    mkdir -p $UPLOAD_DIR
    mkdir -p $INSTANCE_DIR

    mkdir -p $JAR_DIR
    mkdir -p $LOG_DIR

    #检查文件夹是否创建成功
    echo "Testing dir..."
    checkDirWritable

    return $?
}

start() {
    echo "Starting $serviceName"

    # 检查是否存在
    echo "Testing dir..."
    checkDirWritable
    if [[ $? -ne 0 ]]; then
      echo_failure;
      return 1
    fi

    #TODO
    # [ -f $LOK_FILE -a -f $PID_FILE ] && {
    #   echo "already running $serviceName"
    # 	echo_success; #already running
    # 	return 0
    # }
    #
    # [ ! -f $HEAD ] && {
    #   echo "HEAD is null: $HEAD"
    #   return 1
    # }

    printf "%s" "Begin starting $serviceName: "

    #TODO sharedwifi要添加 log 等参数
    GC_LOG_FILE=${LOGS_DIR}/gc_$DATE.log
    LOG_FILE=$LOG_DIR/$DATE.log
    echo "GC_LOG_FILE: $GC_LOG_FILE"
    echo "LOG_FILE: $LOG_FILE"

    # ${JAVA_HOME}/bin/
    RDECK_JVM="-server -Xms4g -Xmx4g -Xmn2g -Xss256K -XX:PermSize=128m -XX:MaxPermSize=128m -XX:GCTimeRatio=19 -XX:+UseConcMarkSweepGC -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=1 -XX:SurvivorRatio=4 -XX:CMSInitiatingOccupancyFraction=70 -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+HeapDumpOnOutOfMemoryError -Xloggc:${GC_LOG_FILE} -Xloggc:${GC_LOG_FILE}"
    rundeckd="java ${RDECK_JVM} -jar ${dstJarFullPath}"
    echo rundeckd=$rundeckd

    pwd
    cd $serviceBasePath
    pwd

    nohup $rundeckd >>$LOG_FILE 2>&1 &
    RETVAL=$?
    PID=$!
    echo $PID > $PID_FILE
    echo "PID = $PID"
    if [ $RETVAL -eq 0 ]; then
    	touch $LOK_FILE
    	echo_success
    else
	     echo_failure
    fi

    return $RETVAL
}

stop() {
    echo "Stopping $serviceName"

    echo "Testing dir..."
    checkDirWritable
    if [[ $? -ne 0 ]]; then
      echo_failure;
      return 1
    fi

    [ ! -f $PID_FILE ] && {
      echo "Stop: not exist pid file, return directly"
    	echo_failure;
    	return 0
    }

    PID=`cat $PID_FILE`
    RETVAL=$?
    [ -z "$PID" ] && {
      echo "Stop fail: empty pid file"
    	echo_failure; #empty pid value"
    	return 1;
    }

    echo "Searching process with pid: $PID"
    ps -p "$PID" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "PID($PID) exist, stopping process..."
    	kill $PID >/dev/null 2>&1
    	RETVAL=$?
    	[ $RETVAL -eq 0 ] || {
          echo "Stop fail: could not kill process"
    	    echo_failure; # could not kill process
    	    return 2
    	}
      echo "Stop exiting process success"
    else
      echo "Cannot find process with pid: $PID"
    fi

    rm -f $PID_FILE; # Remove control files
    rm -f $LOK_FILE
    echo_success
    return 0
}

deploy() {
  echo "Deploying $serviceName"

  #检查文件夹是否创建成功
  echo "Testing dir..."
  checkDirWritable
  echo $?
  if [[ $? -ne 0 ]]; then
    echo "dir illeage"
    return 1;
  fi

  [ ! -f $jarFullPath ] && {
      echo "jarFullPath not exist: $jarFullPath" ;
      return 1;
  }

  # 移动到 serviceName 中的 jar文件夹
  dstJarFullPath=$JAR_DIR/${artifact_url}
  echo dstJarFullPath=$dstJarFullPath
  rm -rf $dstJarFullPath
  mv $jarFullPath $dstJarFullPath

  # 将软引用指向新的 jar 包
  ll $serviceBasePath
  rm -f $HEAD
  ln -s $dstJarFullPath $HEAD
  ll $serviceBasePath

  # 停止原来的服务
  stop
  if [[ $? -ne 0 ]]; then
    echo "fail to stop"
    return 1;
  fi

  # 启用新的服务
  start
  if [[ $? -ne 0 ]]; then
    echo "fail to start: $serviceName"
    return 1;
  fi

  # 检查下
  status
  if [[ $? -ne 0 ]]; then
      echo "fail to start: $serviceName ";
      return 1;
  fi

  return 0;
}

status() {
    echo "Statusing $serviceName"

    echo "Testing dir..."
    checkDirWritable
    if [[ $? -ne 0 ]]; then
      echo_failure;
      return 1
    fi

    RETVAL=0
    test -f "$PID_FILE"
    RETVAL=$?
    [ $RETVAL -eq 0 ] || {
        echo "$serviceName is stopped";
	      return 1;
    }

    PID=`cat $PID_FILE`
    ps -p "$PID" >/dev/null
    RETVAL=$?
    [ $RETVAL -eq 0 ] && {
	     echo "Is running (pid=$PID, port=$RDECK_PORT): $serviceName ";
       return 0;
    } || {
	     echo "dead but pid file exists: $serviceName "
       return 2;
    }

    return 0;
}


case "$jar_wrapper_ops" in
    init)
  init
  RETVAL=$?
  ;;
    deploy)
  deploy
  RETVAL=$?
  ;;
    start)
	start
  RETVAL=$?
	;;
    stop)
	stop
  RETVAL=$?
	;;
    restart)
	stop
	start
  RETVAL=$?
	;;
    condrestart)
	if [ -f $LOK_FILE ]; then
	    stop
	    start
	fi
	;;
    status)
	#status $rundeckd #临时去除
  status
	RETVAL=$?
	;;
    *)
	echo $"Usage: $0 {init|deploy|start|stop|restart|condrestart|status}"
	RETVAL=1
esac

exit $RETVAL
